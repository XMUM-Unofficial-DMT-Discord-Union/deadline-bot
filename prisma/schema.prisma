generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  /// The associated Snowflake retrieved from Discord
  id                        String        @id @unique
  /// The Snowflake from the associated channel to notify new verifications
  verificationNotifyChannel String?
  applications              Application[]
  reports                   Report[]
  role                      Role[]
  suggestions               Suggestion[]
  students                  Student[]
}

model Application {
  id        Int             @id @default(autoincrement())
  type      ApplicationType
  discordId String
  name      String
  reason    String
  guildId   String
  guild     Guild           @relation(fields: [guildId], references: [id])
}

model Suggestion {
  id       Int            @id @default(autoincrement())
  type     SuggestionType
  reason   String
  name     String
  datetime DateTime?      @default(now()) @db.Timestamptz(6)
  location String?
  guildId  String
  guild    Guild          @relation(fields: [guildId], references: [id])
}

model Report {
  id                Int        @id @default(autoincrement())
  type              ReportType
  reporterDiscordId String
  reportedDiscordId String
  datetime          DateTime   @db.Timestamptz(6)
  reason            String
  guildId           String
  guild             Guild      @relation(fields: [guildId], references: [id])
}

model Deadline {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  url              String?
  datetime         DateTime  @db.Timestamptz(6)
  courseId         Int
  course           Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  excludedStudents Student[]
}

model Course {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  deadlines Deadline[]
  students  Student[]
}

model studentsToRoles {
  id               Int      @id @default(autoincrement())
  studentDiscordId String
  roleType         RoleType
  guildId          String
  role             Role     @relation(fields: [guildId, roleType], references: [guildId, type], onDelete: Cascade)
  student          Student  @relation(fields: [studentDiscordId], references: [discordId], onDelete: Cascade)
}

model Student {
  discordId         String            @id @unique
  id                String            @unique
  name              String
  /// A 4-digit string representing the year and month of intake
  enrolledBatch     String
  /// Use `ms` module to get miliseconds from human-readable duration format
  remindTime        String            @default("1 Week")
  studentsToRoles   studentsToRoles[]
  courses           Course[]
  deadlinesExcluded Deadline[]
  guilds            Guild[]
}

model Role {
  /// The corresponding Snowflake retrieved from Discord
  id              String            @unique
  type            RoleType
  guildId         String
  guild           Guild             @relation(fields: [guildId], references: [id], onDelete: Cascade)
  studentsToRoles studentsToRoles[]

  @@id([guildId, type])
}

enum ApplicationType {
  ADMIN
  MOD
  DEV
}

enum ReportType {
  ADMIN
  MOD
  DEV
}

enum SuggestionType {
  CHANNEL
  EVENT
}

/// Each subsequent role represents a higher command privilege
enum RoleType {
  UNVERIFIED
  VERIFIED
  MOD
  ADMIN
  DEV
}
